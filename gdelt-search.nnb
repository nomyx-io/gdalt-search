{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Calling Open-AI API\n\nthe following function lets us call the Open AI API and get the response from the API"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import axios from 'axios';\nimport { jsonrepair } from 'jsonrepair';\n\nconst OPENAI_API_KEY='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'\nconst NEWS_API_KEY='f32d71baa04c4df8a127a04d783a128e'\n\nfunction calculatePayloadSize(payload: any): number {\n    return Buffer.byteLength(JSON.stringify(payload), 'utf8');\n}\nasync function sendRequest(request: any): Promise<any> {\n    let response: any = null;\n    let payload = {\n        model: 'gpt-4',\n        max_tokens: 8192,\n        temperature: 1,\n        top_p: 1,\n        messages: [{\n            role: 'user',\n            content: request\n        }]\n    }\n    let payloadSize = calculatePayloadSize(payload);\n    payload.max_tokens = Math.min(8192, Math.max(1, Math.floor(8192 * (payloadSize / 8192))));\n    try {\n        response = await axios.post(\n            'https://api.openai.com/v1/chat/completions',\n            JSON.stringify(payload), {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${OPENAI_API_KEY}`,\n            },\n        });\n        if(!response) throw new Error('No response');\n        if (response.data && response.data.choices && response.data.choices.length > 0) {\n            response = response.data.choices[0].message.content;\n        } else {\n            throw new Error('No completion found');\n        }\n    } catch (error: any) { throw error;  }\n    return response;\n};\n\n// returns a function that can be called to send a request to the AI. the prompt defines the main\n// prompt that will be sent to the AI. The prompt may contain a mumber of replacement markers.\n// the markers are defined as {0}, {1}, {2}, etc. The function returns a function that takes parameters\n// that will replace the markers in the prompt. The function returns a promise that resolves to the\n// response from the AI.\nfunction createAIFunction(prompt: any) {\n    return function (...args: any[]) {\n        let request = prompt;\n        for (let i = 0; i < args.length; i++) {\n            request = request.replace(`{${i}}`, args[i]);\n        }\n        return sendRequest(request);\n    }\n}\n\nconst aiFunction = createAIFunction('Create a {0} that {1}.');\n\nasync function performTask(_task: string, format: string, input: any = null) {\n    input = input ? `Input: ${input}` : '';\n    return new Promise((resolve, reject) => {\n        const prompt = `You are a non-conversational application development agent. You perform the following task then output its result in the given JSON format:\n        Task: ${_task}\n        Format: ${format}\n        ${input}\n        \\n** You must return all your output using JSON format ${format} **\\n`\n        sendRequest(prompt).then((res) => {\n            try {\n                resolve(JSON.parse(jsonrepair(res)));\n            }\n            catch(e) {\n                console.log('error', e)\n            }\n        }).catch(reject);\n    });\n}\n\n\nconst apiInst = `GDELT GEO 2.0 API\nURL: https://api.gdeltproject.org/api/v2/geo/geo  \nEndpoints: /query, /location, /locationcc, /locationadm1, /domain, /theme, /image  \nParameters: query, mode, format, timespan, maxpoints, geores, sortby  \nOperators: \"phrase\", -exclude, domain:, location:, locationcc:, locationadm1:, imagetag:, tone:, theme:  \nFormats: html, geojson, csv, rss, jsonfeed  \n\nGDELT Doc 2.0 API\nURL: https://api.gdeltproject.org/api/v2/doc/doc  \nEndpoints: /query, /url, /gkg, /theme, /event, /mention  \nParameters: query, mode, maxrecords, orderby, format  \nOperators: \"phrase\", -exclude, url:, domain:, theme:, event:, mention:, sourcelang:  \nFormats: json, csv, rss, jsonfeed  \n\nGoogle News API\nURL: https://newsapi.org/s/google-news-api  \nEndpoints: /v2/everything, /v2/top-headlines  \nParameters: q, sources, domains, from, to, language  \napiKey: f32d71baa04c4df8a127a04d783a128e\n\nGoogle Custom Search API\nURL: https://www.googleapis.com/customsearch/v1  \nRequired Parameters: key, cx, q. Key: AIzaSyDnUfbzrUfwwJGCUGsy3L7K3mdcsM6b8rU, cx: b1df8a6484e9f4249  \nOptional Parameters: c2coff, cr, dateRestrict, exactTerms, excludeTerms, fileType, filter, gl, googleHost, highRange, hl, hq, imgColorType.\n`\nasync function buildSearchPlan(query: any) {\n    const results = await performTask(`Given the following search APIs:\\n\\n---\\n${apiInst}\\n---\\n\\nand user search query, build an analysis plan with one or more steps that will best satisfy the user's query. This might involve querying for keywords, performing analysis on the results, performing searches based on the results of other searches, etc. Size and scope each step so that it is performable by you. Return search URLs for each step, if applicable.`, '{ task: string, description: string, step: number, searchUrls: string[] }', `USER QUERY: ${query}`);\n    return results;\n}\nasync function buildSearchQueries(query: any) {\n    const results = await performTask(`Given the following search APIs:\\n\\n---\\n${apiInst}\\n---\\n\\nand user search query, build a series of search API URLS that can be used to search for the user's query.`, 'string[]', `USER QUERY: ${query}`);\n    return results;\n}\n\nasync function buildSearchQuery(query: any) {\n    const results = await performTask(`Given the following search APIs:\\n\\n---\\n${apiInst}\\n---\\n\\nand search query, build a search API URL that can be used to search for the specified query.`, 'string[]', `SEARCH QUERY: ${query}`);\n    return results;\n}\n\nbuildSearchPlan('I want to identify who is talking about UAPs the most, what the sentiment is, and where the conversation is occurring').then(e => console.log(JSON.stringify(e, null, 2)))\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  {",
                                "    \"task\": \"Gather mentions of UAPs\",",
                                "    \"description\": \"Use the GDELT Doc API to find sources mentioning 'UAPs' by querying with the keyword.\",",
                                "    \"step\": 1,",
                                "    \"searchUrls\": [",
                                "      \"https://api.gdeltproject.org/api/v2/doc/doc?query=UAPs&mode=ArtList&maxrecords=250&format=json\"",
                                "    ]",
                                "  },",
                                "  {",
                                "    \"task\": \"Identify who is talking the most\",",
                                "    \"description\": \"Analyze the sources gathered in the first step, identify those who frequently mention 'UAPs'\",",
                                "    \"step\": 2,",
                                "    \"searchUrls\": []",
                                "  },",
                                "  {",
                                "    \"task\": \"Understand the sentiment\",",
                                "    \"description\": \"Using the GDELT GEO API, filter the results based on tone operator to understand the overall sentiment.\",",
                                "    \"step\": 3,",
                                "    \"searchUrls\": [",
                                "      \"https://api.gdeltproject.org/api/v2/geo/geo?query=UAPs&mode=ArtList&maxpoints=250&format=json&operator=tone\"",
                                "    ]",
                                "  },",
                                "  {",
                                "    \"task\": \"Track conversation locations\",",
                                "    \"description\": \"Using the location operator in GDELT GEO API, analyze where these conversations about 'UAPs' are taking place geographically.\",",
                                "    \"step\": 4,",
                                "    \"searchUrls\": [",
                                "      \"https://api.gdeltproject.org/api/v2/geo/geo?query=UAPs&mode=ArtList&maxpoints=250&format=json&operator=location\"",
                                "    ]",
                                "  }",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}